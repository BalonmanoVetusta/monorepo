{"version":3,"sources":["../src/dependencies/getHtmlJSDOM.ts","../src/services/parsers/select-options.ts","../src/constants/index.ts","../src/services/urls/rfebm-url-creator.ts","../src/services/urls/get-url-federation-page.ts","../src/services/fetchers/rfebm-fetcher.ts","../src/services/fetchers/get-federations-ids.ts","../src/index.ts"],"sourcesContent":["import { parseHTML } from \"linkedom\";\nimport { HTMLDocument } from \"linkedom/types/html/document\";\n\nexport function getHtmlJSDOM(htmlInput: string | HTMLDocument): Window & typeof globalThis {\n  const parser = parseHTML(htmlInput);\n\n  return parser;\n}\n","export declare type SelectOptionsValue = { id: number; label: string };\nexport declare type SelectOptions = { [key: string]: SelectOptionsValue };\n\n// This parse a select input element to get label and value\nexport function selectOptions(\n  document: Document,\n  querySelector: string\n): SelectOptions {\n  const { options } = document.querySelector(\n    querySelector\n  ) as HTMLSelectElement;\n\n  const optionsArray = Array.from(options);\n  const mappedOptions = optionsArray.map((option: HTMLOptionElement) => [\n    option.value.toString(),\n    {\n      id: Number(option.value),\n      label: option.textContent,\n    } as SelectOptionsValue,\n  ]);\n\n  // console.log(mappedOptions);\n  // [\n  //   [ \"33\", {\n  //       id: 33,\n  //       label: \"text...\"\n  //     } ], [ \"36\", {\n  //       id: 36\n  //       label: \"text...\"\n  //     } ], [\n  //     \"35\", {\n  //       id: 35,\n  //       label: \"text...\"\n  //     }\n  //   ]\n  // ]\n\n  return Object.fromEntries(mappedOptions);\n}\n","const { env } = process ?? Bun ?? Deno ?? {};\n\nexport const {\n  RFEBM_BASE_URL = 'https://www.rfebm.com/competiciones',\n  ISQUAD_HANDBALL = 'https://balonmano.isquad.es',\n  RFEBM_AMBITO_ZERO = 0,\n  RFEBM_AMBITO_ONE = 1,\n  RFEBM_COURT_COMPETITIONS_SELECTION = 0,\n  ISQUAD_TOKEN = '3196a2e896f030126138678fa6a5c19e',\n  ISQUAD_SEC = '8bbbcd3eaebf094cebb543f342d5a87c',\n} = env ?? {};\n","export function rfebmUrlCreator(\n  baseUrl: string,\n  pathname: string,\n  queryParams: object\n): URL {\n  const completeUrl = [baseUrl, pathname].join('/');\n  const url = new URL(completeUrl);\n  Object.entries(queryParams).forEach(([key, value]) =>\n    url.searchParams.append(key, value)\n  );\n\n  return url;\n}\n","import { RFEBM_BASE_URL, RFEBM_COURT_COMPETITIONS_SELECTION } from 'constants';\nimport { rfebmUrlCreator } from './rfebm-url-creator';\n\nexport function getUrlFederationPage(federationId: number = 9999) { // National federation by default\n  return rfebmUrlCreator(RFEBM_BASE_URL, 'competicion.php', {\n    seleccion: RFEBM_COURT_COMPETITIONS_SELECTION,\n    id_territorial: federationId,\n  });\n}\n","const MAX_TRIES = 5;\nlet counter = 0;\n\nexport async function rfebmFetcher(\n  url: string | URL,\n  init: RequestInit = {}\n): Promise<string> {\n  init.method ??= 'GET';\n  init.redirect ??= 'follow';\n\n  const apiUrl = url instanceof URL ? url.href : url;\n\n  try {\n    const response = await fetch(apiUrl, init);\n    if (!response.ok) throw new Error('Error while fetching the webpage');\n\n    const asText = response.text();\n\n    return asText;\n  } catch (error) {}\n\n  return '';\n}\n","import { getHtmlJSDOM } from 'dependencies';\nimport { SelectOptions, selectOptions } from 'services/parsers';\nimport { getUrlFederationPage } from 'services/urls';\nimport { rfebmFetcher } from './rfebm-fetcher';\n\nexport async function getFederationsIds(\n  federationId = 9999\n): Promise<SelectOptions> {\n  const url = getUrlFederationPage(federationId);\n\n  const selector = '#territorial';\n\n  const htmlDocument = await rfebmFetcher(url);\n\n  if (!htmlDocument) return {} as SelectOptions;\n\n  const { document } = getHtmlJSDOM(htmlDocument);\n\n  return selectOptions(document, selector);\n}\n","import { getFederationsIds } from \"./services/fetchers\";\ngetFederationsIds().then(console.log)\n"],"mappings":";AAAA,SAAS,iBAAiB;AAGnB,SAAS,aAAa,WAA8D;AACzF,QAAM,SAAS,UAAU,SAAS;AAElC,SAAO;AACT;;;ACHO,SAAS,cACd,UACA,eACe;AACf,QAAM,EAAE,QAAQ,IAAI,SAAS;AAAA,IAC3B;AAAA,EACF;AAEA,QAAM,eAAe,MAAM,KAAK,OAAO;AACvC,QAAM,gBAAgB,aAAa,IAAI,CAAC,WAA8B;AAAA,IACpE,OAAO,MAAM,SAAS;AAAA,IACtB;AAAA,MACE,IAAI,OAAO,OAAO,KAAK;AAAA,MACvB,OAAO,OAAO;AAAA,IAChB;AAAA,EACF,CAAC;AAkBD,SAAO,OAAO,YAAY,aAAa;AACzC;;;ACtCA,IAAM,EAAE,IAAI,IAAI,WAAW,OAAO,QAAQ,CAAC;AAEpC,IAAM;AAAA,EACX,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,qCAAqC;AAAA,EACrC,eAAe;AAAA,EACf,aAAa;AACf,IAAI,OAAO,CAAC;;;ACVL,SAAS,gBACd,SACA,UACA,aACK;AACL,QAAM,cAAc,CAAC,SAAS,QAAQ,EAAE,KAAK,GAAG;AAChD,QAAM,MAAM,IAAI,IAAI,WAAW;AAC/B,SAAO,QAAQ,WAAW,EAAE;AAAA,IAAQ,CAAC,CAAC,KAAK,KAAK,MAC9C,IAAI,aAAa,OAAO,KAAK,KAAK;AAAA,EACpC;AAEA,SAAO;AACT;;;ACZA,SAAS,kBAAAA,iBAAgB,sCAAAC,2CAA0C;AAG5D,SAAS,qBAAqB,eAAuB,MAAM;AAChE,SAAO,gBAAgBC,iBAAgB,mBAAmB;AAAA,IACxD,WAAWC;AAAA,IACX,gBAAgB;AAAA,EAClB,CAAC;AACH;;;ACLA,eAAsB,aACpB,KACA,OAAoB,CAAC,GACJ;AACjB,OAAK,WAAW;AAChB,OAAK,aAAa;AAElB,QAAM,SAAS,eAAe,MAAM,IAAI,OAAO;AAE/C,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,QAAQ,IAAI;AACzC,QAAI,CAAC,SAAS;AAAI,YAAM,IAAI,MAAM,kCAAkC;AAEpE,UAAM,SAAS,SAAS,KAAK;AAE7B,WAAO;AAAA,EACT,SAAS,OAAP;AAAA,EAAe;AAEjB,SAAO;AACT;;;ACjBA,eAAsB,kBACpB,eAAe,MACS;AACxB,QAAM,MAAM,qBAAqB,YAAY;AAE7C,QAAM,WAAW;AAEjB,QAAM,eAAe,MAAM,aAAa,GAAG;AAE3C,MAAI,CAAC;AAAc,WAAO,CAAC;AAE3B,QAAM,EAAE,SAAS,IAAI,aAAa,YAAY;AAE9C,SAAO,cAAc,UAAU,QAAQ;AACzC;;;AClBA,kBAAkB,EAAE,KAAK,QAAQ,GAAG;","names":["RFEBM_BASE_URL","RFEBM_COURT_COMPETITIONS_SELECTION","RFEBM_BASE_URL","RFEBM_COURT_COMPETITIONS_SELECTION"]}